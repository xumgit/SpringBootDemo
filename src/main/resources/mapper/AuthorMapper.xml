<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sts.demo.dao.AuthorMapper" >
  <resultMap id="BaseResultMap" type="com.sts.demo.pojo.Author" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="country" property="country" jdbcType="VARCHAR" />
    <result column="clone" property="clone" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, name, age, email, country, clone
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from author
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultType="java.util.Map">
   	select 
  	<include refid="Base_Column_List" />
    from author
    order by name asc
  </select> 
  <select id="selectAllByList" resultMap="BaseResultMap">
   	select 
  	<include refid="Base_Column_List" />
    from author
    order by name asc
  </select> 
  <select id="selectByParameterOne" resultMap="BaseResultMap" parameterType="com.sts.demo.pojo.Author">
   	select 
  	<include refid="Base_Column_List" />
    from author
    where name = #{name,jdbcType=VARCHAR} 
    	and age = #{age,jdbcType=INTEGER}
    	and country = #{country,jdbcType=VARCHAR}
  </select> 
  <select id="selectByParameterTwo" resultMap="BaseResultMap">
   	select 
  	<include refid="Base_Column_List" />
    from author
    where name = #{name,jdbcType=VARCHAR}
    	and age = #{age,jdbcType=INTEGER}
    	and country = #{country,jdbcType=VARCHAR}
  </select> 
  <select id="selectByParameterThree" resultMap="BaseResultMap">
   	select 
  	<include refid="Base_Column_List" />
    from author
    where  name = #{author.name,jdbcType=VARCHAR}
    	and age = #{author.age,jdbcType=INTEGER}
    	and country = #{country,jdbcType=VARCHAR}
  </select>
  <select id="selectAllCount" resultType="java.lang.Integer">
   	select count(1) from author
  </select>
  <select id="selectAuthorByBootGrid" parameterType="java.util.Map" resultType="java.util.Map">
   	select 
    <include refid="Base_Column_List" />
    from author
    <trim prefix=" where (" suffix=") "> 
    	<if test="searchPhrase != null">
        	id like "%"#{searchPhrase, jdbcType=VARCHAR}"%" 
        	or name like "%"#{searchPhrase, jdbcType=VARCHAR}"%" 
        	or age like "%"#{searchPhrase, jdbcType=VARCHAR}"%" 
        	or email like "%"#{searchPhrase, jdbcType=VARCHAR}"%" 
        	or country like "%"#{searchPhrase, jdbcType=VARCHAR}"%"
        	or clone like "%"#{searchPhrase, jdbcType=VARCHAR}"%"
      	</if>
    </trim>
    <trim prefix=" order by " suffix=" " suffixOverrides=",">
      	<if test="idSort != null" >
        	id ${idSort},
      	</if>
      	<if test="nameSort != null" >
        	name ${nameSort},
      	</if>
      	<if test="ageSort != null" >
        	age ${ageSort},
      	</if> 
      	<if test="emailSort != null" >
        	email ${emailSort},
      	</if>
      	<if test="countrySort != null" >
        	country ${countrySort},
      	</if>
      	<if test="cloneSort != null" >
        	clone ${cloneSort},
      	</if>
    </trim>
    limit #{offset,jdbcType=INTEGER},#{rowCount,jdbcType=INTEGER}
  </select> 
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from author
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sts.demo.pojo.Author" >
    insert into author (id, name, age, 
      email, country, clone)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, 
      #{email,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, #{clone,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.sts.demo.pojo.Author" >
    insert into author
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="age != null" >
        age,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="country != null" >
        country,
      </if>
      <if test="clone != null" >
        clone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="country != null" >
        #{country,jdbcType=VARCHAR},
      </if>
      <if test="clone != null" >
        #{clone,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sts.demo.pojo.Author" >
    update author
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="country != null" >
        country = #{country,jdbcType=VARCHAR},
      </if>
      <if test="clone != null" >
        clone = #{clone,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="batchUpdate" parameterType="java.util.List">  
   	<foreach collection="list" separator=";" item="item">  
    	update author  
     	<set>
      		<if test="item.name != null">
        		name = #{item.name,jdbcType=VARCHAR},
      		</if>
      		<if test="item.age != null">
        		age = #{item.age,jdbcType=INTEGER},
      		</if>
      		<if test="item.email != null">
        		email = #{item.email,jdbcType=VARCHAR},
      		</if>
      		<if test="item.country != null">
        		country = #{item.country,jdbcType=VARCHAR},
      		</if>
      		<if test="item.clone != null">
        		clone = #{item.clone,jdbcType=VARCHAR},
      		</if>
    	</set>
    	<where>  
			id = #{item.id,jdbcType=INTEGER}  
        </where> 
   	</foreach>  
  </update>  
  
  <update id="batchUpdateCaseWhen" parameterType="java.util.List">  
    update author  
    <trim prefix="set" suffixOverrides=",">  
        <trim prefix="name =case" suffix="end,">  
            <foreach collection="list" item="item">  
                <if test="item.name!=null">  
                    when id=#{item.id} then #{item.name}  
                </if>  
            </foreach>  
        </trim>  
        <trim prefix="age =case" suffix="end,">  
            <foreach collection="list" item="item">  
                <if test="item.age!=null">  
                    when id=#{item.id} then #{item.age}  
                </if>  
            </foreach>  
        </trim>  
        <trim prefix="email =case" suffix="end,">  
            <foreach collection="list" item="item">  
                <if test="item.email!=null">  
                    when id=#{item.id} then #{item.email}  
                </if>  
            </foreach>  
        </trim>  
        <trim prefix="country =case" suffix="end,">  
            <foreach collection="list" item="item">  
                <if test="item.country!=null">  
                    when id=#{item.id} then #{item.country}  
                </if>  
            </foreach>  
        </trim>  
        <trim prefix="clone =case" suffix="end,">  
            <foreach collection="list" item="item">  
                <if test="item.clone!=null">  
                    when id=#{item.id} then #{item.clone}  
                </if>  
            </foreach>  
        </trim>  
    </trim>  
    <where>  
        <foreach collection="list" separator="or" item="item">  
            id = #{item.id}  
        </foreach>  
    </where>  
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.sts.demo.pojo.Author" >
    update author
    set name = #{name,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      email = #{email,jdbcType=VARCHAR},
      country = #{country,jdbcType=VARCHAR},
      clone = #{clone,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>